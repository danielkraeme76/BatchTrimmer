import sys import os from PySide6.QtWidgets import ( QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QTabWidget, QPushButton, QFileDialog, QListWidget, QSpinBox, QCheckBox, QFormLayout, QMessageBox, QHBoxLayout, QSlider, QComboBox, QLineEdit, QListWidgetItem, QProgressBar ) from PySide6.QtCore import Qt from PySide6.QtGui import QColor, QIcon from pydub import AudioSegment def get_icon_path(): if hasattr(sys, "_MEIPASS"): return os.path.join(sys._MEIPASS, "batchtrimmer.ico") else: return os.path.join(os.path.dirname(os.path.abspath(__file__)), "batchtrimmer.ico") # --- Helper: threshold trim --- def trim_by_threshold(sound: AudioSegment, thresh_begin: int, thresh_end: int, chunk_size=10) -> AudioSegment: start_ms = 0 while start_ms < len(sound): chunk = sound[start_ms:start_ms+chunk_size] if chunk.dBFS > thresh_begin: break start_ms += chunk_size end_ms = len(sound) while end_ms > 0: chunk = sound[end_ms-chunk_size:end_ms] if chunk.dBFS > thresh_end: break end_ms -= chunk_size return sound[start_ms:end_ms] # --- Input Tab --- class InputTab(QWidget): def __init__(self): super().__init__() self.setAcceptDrops(True) layout = QVBoxLayout() self.label = QLabel("Drag & drop WAV/AIFF files here or choose via button.") self.file_list = QListWidget() # Buttons self.button_choose = QPushButton("Choose files") self.button_choose.clicked.connect(self.open_file_dialog) self.button_reset = QPushButton("Reset file selection") self.button_reset.clicked.connect(self.reset_selection) layout.addWidget(self.label) layout.addWidget(self.file_list) layout.addWidget(self.button_choose) layout.addWidget(self.button_reset) self.setLayout(layout) def open_file_dialog(self): files, _ = QFileDialog.getOpenFileNames(self, "Choose files", "", "Audio Files (*.wav *.aiff)") for f in files: self.file_list.addItem(f) def reset_selection(self): self.file_list.clear() def dragEnterEvent(self, event): if event.mimeData().hasUrls(): event.acceptProposedAction() def dropEvent(self, event): for url in event.mimeData().urls(): file_path = url.toLocalFile() if file_path.lower().endswith((".wav", ".aiff")): self.file_list.addItem(file_path) # --- Processing Tab --- class ProcessingTab(QWidget): def __init__(self): super().__init__() layout = QVBoxLayout() form = QFormLayout() # Threshold Beginning self.thresh_begin_spin = QSpinBox() self.thresh_begin_spin.setRange(-200, 0) self.thresh_begin_spin.setValue(-50) # Default -50 dB self.thresh_begin_spin.setSuffix(" dB") self.thresh_begin_slider = QSlider(Qt.Horizontal) self.thresh_begin_slider.setRange(-200, 0) self.thresh_begin_slider.setValue(-50) self.thresh_begin_spin.valueChanged.connect(self.thresh_begin_slider.setValue) self.thresh_begin_slider.valueChanged.connect(self.thresh_begin_spin.setValue) thresh_begin_layout = QHBoxLayout() thresh_begin_layout.addWidget(self.thresh_begin_spin) thresh_begin_layout.addWidget(self.thresh_begin_slider) # Threshold End self.thresh_end_spin = QSpinBox() self.thresh_end_spin.setRange(-200, 0) self.thresh_end_spin.setValue(-50) # Default -50 dB self.thresh_end_spin.setSuffix(" dB") self.thresh_end_slider = QSlider(Qt.Horizontal) self.thresh_end_slider.setRange(-200, 0) self.thresh_end_slider.setValue(-50) self.thresh_end_spin.valueChanged.connect(self.thresh_end_slider.setValue) self.thresh_end_slider.valueChanged.connect(self.thresh_end_spin.setValue) thresh_end_layout = QHBoxLayout() thresh_end_layout.addWidget(self.thresh_end_spin) thresh_end_layout.addWidget(self.thresh_end_slider) # Normalize self.normalize_check = QCheckBox("Normalize") # Fade In self.fadein_spin = QSpinBox() self.fadein_spin.setRange(0, 10000) self.fadein_spin.setSuffix(" ms") self.fadein_spin.setFixedWidth(80) # gleiche Breite wie Threshold-Spins # Fade Out self.fadeout_spin = QSpinBox() self.fadeout_spin.setRange(0, 10000) self.fadeout_spin.setSuffix(" ms") self.fadeout_spin.setFixedWidth(80) # gleiche Breite wie Threshold-Spins # Form form.addRow("Threshold Beginning:", thresh_begin_layout) form.addRow("Threshold End:", thresh_end_layout) form.addRow(self.normalize_check) form.addRow("Fade In:", self.fadein_spin) form.addRow("Fade Out:", self.fadeout_spin) layout.addLayout(form) self.setLayout(layout) # --- Output Tab --- class OutputTab(QWidget): def __init__(self, input_tab, processing_tab): super().__init__() self.input_tab = input_tab self.processing_tab = processing_tab self.target_folder = "" layout = QVBoxLayout() form = QFormLayout() # File type self.filetype_combo = QComboBox() self.filetype_combo.addItems([".wav", ".aiff"]) # Bit depth self.bitdepth_combo = QComboBox() self.bitdepth_combo.addItems(["as source file", "8", "12", "16", "24", "32"]) # Sample rate self.samplerate_combo = QComboBox() self.samplerate_combo.addItems([ "as source file", "4000", "8000", "11025", "16000", "22050", "32000", "44100", "48000", "96000" ]) # File name options self.filename_combo = QComboBox() self.filename_combo.addItems(["as source", "Suffix"]) self.suffix_edit = QLineEdit() self.suffix_edit.setMaxLength(10) self.suffix_edit.setPlaceholderText("max. 10 characters Suffix") fn_layout = QHBoxLayout() fn_layout.addWidget(self.filename_combo) fn_layout.addWidget(self.suffix_edit) # Target folder self.target_button = QPushButton("choose destination folder (optional)") self.target_button.clicked.connect(self.choose_folder) # Subfolder option + Textfeld subfolder_layout = QHBoxLayout() self.subfolder_check = QCheckBox("New Subfolder in source Folder:") self.subfolder_check.setChecked(True) self.subfolder_name = QLineEdit("Processed") self.subfolder_name.setMaxLength(20) subfolder_layout.addWidget(self.subfolder_check) subfolder_layout.addWidget(self.subfolder_name) # Overwrite option (standardmäßig aktiviert) self.overwrite_check = QCheckBox("Overwrite existing files") self.overwrite_check.setChecked(True)import sys import os from PySide6.QtWidgets import ( QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QTabWidget, QPushButton, QFileDialog, QListWidget, QSpinBox, QCheckBox, QFormLayout, QMessageBox, QHBoxLayout, QSlider, QComboBox, QLineEdit, QListWidgetItem, QProgressBar ) from PySide6.QtCore import Qt from PySide6.QtGui import QColor, QIcon from pydub import AudioSegment def get_icon_path(): if hasattr(sys, "_MEIPASS"): return os.path.join(sys._MEIPASS, "batchtrimmer.ico") else: return os.path.join(os.path.dirname(os.path.abspath(__file__)), "batchtrimmer.ico") # --- Helper: threshold trim --- def trim_by_threshold(sound: AudioSegment, thresh_begin: int, thresh_end: int, chunk_size=10) -> AudioSegment: start_ms = 0 while start_ms < len(sound): chunk = sound[start_ms:start_ms+chunk_size] if chunk.dBFS > thresh_begin: break start_ms += chunk_size end_ms = len(sound) while end_ms > 0: chunk = sound[end_ms-chunk_size:end_ms] if chunk.dBFS > thresh_end: break end_ms -= chunk_size return sound[start_ms:end_ms] # --- Input Tab --- class InputTab(QWidget): def __init__(self): super().__init__() self.setAcceptDrops(True) layout = QVBoxLayout() self.label = QLabel("Drag & drop WAV/AIFF files here or choose via button.") self.file_list = QListWidget() # Buttons self.button_choose = QPushButton("Choose files") self.button_choose.clicked.connect(self.open_file_dialog) self.button_reset = QPushButton("Reset file selection") self.button_reset.clicked.connect(self.reset_selection) layout.addWidget(self.label) layout.addWidget(self.file_list) layout.addWidget(self.button_choose) layout.addWidget(self.button_reset) self.setLayout(layout) def open_file_dialog(self): files, _ = QFileDialog.getOpenFileNames(self, "Choose files", "", "Audio Files (*.wav *.aiff)") for f in files: self.file_list.addItem(f) def reset_selection(self): self.file_list.clear() def dragEnterEvent(self, event): if event.mimeData().hasUrls(): event.acceptProposedAction() def dropEvent(self, event): for url in event.mimeData().urls(): file_path = url.toLocalFile() if file_path.lower().endswith((".wav", ".aiff")): self.file_list.addItem(file_path) # --- Processing Tab --- class ProcessingTab(QWidget): def __init__(self): super().__init__() layout = QVBoxLayout() form = QFormLayout() # Threshold Beginning self.thresh_begin_spin = QSpinBox() self.thresh_begin_spin.setRange(-200, 0) self.thresh_begin_spin.setValue(-50) # Default -50 dB self.thresh_begin_spin.setSuffix(" dB") self.thresh_begin_slider = QSlider(Qt.Horizontal) self.thresh_begin_slider.setRange(-200, 0) self.thresh_begin_slider.setValue(-50) self.thresh_begin_spin.valueChanged.connect(self.thresh_begin_slider.setValue) self.thresh_begin_slider.valueChanged.connect(self.thresh_begin_spin.setValue) thresh_begin_layout = QHBoxLayout() thresh_begin_layout.addWidget(self.thresh_begin_spin) thresh_begin_layout.addWidget(self.thresh_begin_slider) # Threshold End self.thresh_end_spin = QSpinBox() self.thresh_end_spin.setRange(-200, 0) self.thresh_end_spin.setValue(-50) # Default -50 dB self.thresh_end_spin.setSuffix(" dB") self.thresh_end_slider = QSlider(Qt.Horizontal) self.thresh_end_slider.setRange(-200, 0) self.thresh_end_slider.setValue(-50) self.thresh_end_spin.valueChanged.connect(self.thresh_end_slider.setValue) self.thresh_end_slider.valueChanged.connect(self.thresh_end_spin.setValue) thresh_end_layout = QHBoxLayout() thresh_end_layout.addWidget(self.thresh_end_spin) thresh_end_layout.addWidget(self.thresh_end_slider) # Normalize self.normalize_check = QCheckBox("Normalize") # Fade In self.fadein_spin = QSpinBox() self.fadein_spin.setRange(0, 10000) self.fadein_spin.setSuffix(" ms") self.fadein_spin.setFixedWidth(80) # gleiche Breite wie Threshold-Spins # Fade Out self.fadeout_spin = QSpinBox() self.fadeout_spin.setRange(0, 10000) self.fadeout_spin.setSuffix(" ms") self.fadeout_spin.setFixedWidth(80) # gleiche Breite wie Threshold-Spins # Form form.addRow("Threshold Beginning:", thresh_begin_layout) form.addRow("Threshold End:", thresh_end_layout) form.addRow(self.normalize_check) form.addRow("Fade In:", self.fadein_spin) form.addRow("Fade Out:", self.fadeout_spin) layout.addLayout(form) self.setLayout(layout) # --- Output Tab --- class OutputTab(QWidget): def __init__(self, input_tab, processing_tab): super().__init__() self.input_tab = input_tab self.processing_tab = processing_tab self.target_folder = "" layout = QVBoxLayout() form = QFormLayout() # File type self.filetype_combo = QComboBox() self.filetype_combo.addItems([".wav", ".aiff"]) # Bit depth self.bitdepth_combo = QComboBox() self.bitdepth_combo.addItems(["as source file", "8", "12", "16", "24", "32"]) # Sample rate self.samplerate_combo = QComboBox() self.samplerate_combo.addItems([ "as source file", "4000", "8000", "11025", "16000", "22050", "32000", "44100", "48000", "96000" ]) # File name options self.filename_combo = QComboBox() self.filename_combo.addItems(["as source", "Suffix"]) self.suffix_edit = QLineEdit() self.suffix_edit.setMaxLength(10) self.suffix_edit.setPlaceholderText("max. 10 characters Suffix") fn_layout = QHBoxLayout() fn_layout.addWidget(self.filename_combo) fn_layout.addWidget(self.suffix_edit) # Target folder self.target_button = QPushButton("choose destination folder (optional)") self.target_button.clicked.connect(self.choose_folder) # Subfolder option + Textfeld subfolder_layout = QHBoxLayout() self.subfolder_check = QCheckBox("New Subfolder in source Folder:") self.subfolder_check.setChecked(True) self.subfolder_name = QLineEdit("Processed") self.subfolder_name.setMaxLength(20) subfolder_layout.addWidget(self.subfolder_check) subfolder_layout.addWidget(self.subfolder_name) # Overwrite option (standardmäßig aktiviert) self.overwrite_check = QCheckBox("Overwrite existing files") self.overwrite_check.setChecked(True)